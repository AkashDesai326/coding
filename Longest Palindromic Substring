class Solution {
public:
    string longestPalindrome(string s) {
        vector<vector<int>> dp(s.size() , vector<int> (s.size() , 0));
        string result;
        int i,j,pi,pj,size = s.size();
        for(i=0; i<s.size(); i++)
           dp[i][i]=1;
           
        int start = 0,maxLength = 1;
        i=0;
        
        for ( i = 0; i < size - 1; ++i) {
            if (s[i] == s[i + 1]) {
                dp[i][i + 1] = 1;
                start = i;
                maxLength = 2;
            }
        }
        i=0;
        j=2;
        while(i<size && j<size)
        {
            pi = i;
            pj = j;
            while(i < size && j < size)
            {
                if(s[i] == s[j] && dp[i+1][j-1])
                {
                   dp[i][j] = 1;  
                    if (j-i + 1 > maxLength) {
                        start = i;
                        maxLength = j-i + 1;               
                    }
                }
                i++;
                j++;
            }
            i=0;
            j=pj+1;
            if(j==size) break;
        }
        return s.substr(start , maxLength);
    }
};
